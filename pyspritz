#!/usr/bin/python2

import getopt
import json
import os
import pygame
import subprocess
import sys
import time
import tkinter


class Constants:
    BLACK = (0, 0, 0)
    GRAY = (100, 100, 100)
    RED = (255, 0, 0)
    WHITE = (255, 255, 255)
    CONFIG = ""


if sys.platform == "win32":
    Constants.CONFIG = os.path.expanduser("~") + "/AppData/Local/pyspritz"
else:
    Constants.CONFIG = os.path.expanduser("~") + "/.config/pyspritz"


class Defaults:
    WPM = 250
    FONT_SIZE = 40
    GROUP_SIZE = 1


class Config:
    def __init__(self):
        self.wpm = Defaults.WPM
        self.font_size = Defaults.FONT_SIZE
        self.group_size = Defaults.GROUP_SIZE
        try:
            config_file = open(Constants.CONFIG, "r")
            config_json = json.load(config_file)
            config_file.close()
            self.wpm = config_json['wpm']
        except:
            print('Could not read config file. Creating a new one.')

    def save(self):
        config_file = open(Constants.CONFIG, "w")
        config_dict = {}
        config_dict['wpm'] = self.wpm
        json.dump(config_dict, config_file)

        config_file.close()

class TextIterator:
    def __init__(self, text):
        self._text = text
        self._index = 0

    def __next__(self):
        if self._index < self._text.size():
            ret_val = self._text[self._index]
            self._index += 1
            return ret_val
        raise StopIteration

class Text:
    def __init__(self, text, group_size):
        self._text_blocks = []
        self._text = text
        self._group_size = group_size
        self._adapt_for_group_size()

    def set_group_size(self, group_size):
        self._group_size = group_size
        self._adapt_for_group_size()

    def __iter__(self):
        return TextIterator(self)

    def size(self):
        return len(self._text_blocks)

    def __getitem__(self, index):
        return self._text_blocks[index]

    def _adapt_for_group_size(self):
        pass


class SimpleText(Text):
    def _adapt_for_group_size(self):
        self._text_blocks = []
        segments = [w for w in self._text.split() if w != '']
        index = 0
        for index in range(0, int((len(segments)/self._group_size) + (len(segments) % self._group_size > 0))):
            start = index * self._group_size
            end = min(self._group_size*(index+1), len(segments))
            self._text_blocks += [' '.join(segments[start:end])]

class SmartText(Text):
    def _adapt_for_group_size(self):
        self._text_blocks = []
        segments = [w for w in self._text.split() if w != '']
        text_block = ''
        for seg in segments:
            if text_block == '':
                text_block = seg
            else:
                new_block = ' '.join([text_block, seg])
                if len(new_block) > group_size:
                    self._text_blocks += [text_block]
                    text_block = seg
                else:
                    text_block = new_block

        if text_block != '':
            self._text_blocks += [text_block]


class UserInterface:
    def __init__(self, font_size, text):
        pygame.font.init()
        self._font = pygame.font.Font(self._select_font(), font_size)
        self._text_height = font_size
        width = 100
        height = self._text_height * 5

        for text_group in text:
            render_object = self._font.render(text_group, 1, Constants.GRAY)
            width = max(render_object.get_width() + 200, width)

        self._screen = pygame.display.set_mode((width, height), pygame.NOFRAME)
        self._splitter_pos = width / 3

    def set_text(self, text):
        first, middle, last = self._create_render_objects(text)
        self._screen.fill(Constants.WHITE)
        w, h = pygame.display.get_surface().get_size()
        pygame.draw.line(self._screen, Constants.BLACK, (0, 0), (w, 0), 2)
        pygame.draw.line(self._screen, Constants.BLACK, (0, h-2), (w, h-2), 2)
        pygame.draw.line(self._screen, Constants.BLACK, (0, 0), (0, h), 2)
        pygame.draw.line(self._screen, Constants.BLACK, (w-2, 0), (w-2, h), 2)
        pygame.draw.line(self._screen, Constants.RED, (self._splitter_pos, self._text_height* 3/4), (self._splitter_pos, self._text_height*7/4), 2)
        pygame.draw.line(self._screen, Constants.RED, (self._splitter_pos, self._text_height*13/4), (self._splitter_pos, self._text_height*17/4), 2)

        self._screen.blit(first, (self._splitter_pos - (middle.get_width() / 2) - first.get_width(), self._text_height * 2))
        self._screen.blit(middle, (self._splitter_pos - (middle.get_width() / 2), self._text_height * 2))
        self._screen.blit(last, (self._splitter_pos + (middle.get_width() / 2), self._text_height * 2))

        pygame.display.update()

    def _create_render_objects(self, text):
        part = int(len(text) / 3)
        if text[part] == ' ':
            part += 1
        first = self._font.render(text[:part], 1, Constants.GRAY)
        middle = self._font.render(text[part], 1, Constants.RED)
        last = self._font.render(text[(part + 1):], 1, Constants.GRAY)
        return first, middle, last

    def _select_font(self):
        font = pygame.font.match_font('gentium')
        if font != None:
            return font
        font = pygame.font.match_font('freeserif')
        if font != None:
            return font
        return pygame.font.match_font('dejavusans')

    def __del__(self):
        pygame.display.quit()

class SpeedReader:
    def __init__(self, font_size, group_size, smart):
        self._config = Config()
        self._config.font_size = font_size
        self._config.group_size = group_size

        self._text = self.create_text_object(smart)
        self._close = False
        self._paused = False
        self._restart = False

    def get_text_size(self):
        return self._text.size()

    def read(self):
        while not self.scroll_text():
            pass
        self._config.save()
        time.sleep(1)

    def create_text_object(self, smart):
        if smart:
            return SmartText(self.get_text_to_read(), self._config.group_size)
        else:
            return SimpleText(self.get_text_to_read(), self._config.group_size)

    def get_text_to_read(self):
        if which('xclip') == None:
            text = tkinter.Tk().clipboard_get()
            return text
        else:
            text = subprocess.Popen(['xclip', '-o'], stdout=subprocess.PIPE).communicate()[0]
            text = text.decode("utf-8").strip()
            return text.strip()

    def scroll_text(self):
        self._close = False
        self._paused = False
        self._restart = False

        ui = UserInterface(self._config.font_size, self._text)

        # We display the first word a bit longer
        ui.set_text(self._text[0])

        for group in self._text:
            self.read_event_queue()
            self.sleepytime()
            self.read_event_queue()

            if self._close:
                return True
            if self._restart:
                return False
            ui.set_text(group)

        self.sleepytime()
        return True

    def sleepytime(self):
        time.sleep(60.0 / self._config.wpm)
        while self._paused and not self._close and not self._restart:
            self.read_event_queue()
            time.sleep(0.1)

    def read_event_queue(self):
        events = pygame.event.get()

        for event in events:
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    self._close = True
                if event.key == pygame.K_LEFT:
                    self._config.wpm -= 15
                if event.key == pygame.K_RIGHT:
                    self._config.wpm += 15
                if event.key == pygame.K_SPACE:
                    self._paused = not self._paused
                if event.key == pygame.K_r:
                    self._restart = True


def which(program):
    import os
    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file

    return None

def usage():
    print("-h, --help:                  Print this help.")
    print("-f, --font_size <SIZE>:      Set the font size.")
    print('-s, --smart:                 Smart mode. This makes the group size an indicator for the amount of symbols instead of words')
    print('-g, --group_size <SIZE>:     Group size. In smart mode, this is the amount of symbols. In normal mode, this is the amount of words')
    print('')
    print('Press left to decrease WPM, press right to increase WPM.')
    print('Press R to restart.')
    print('Press space bar to pause.')
    print('Press escape to stop.')

if __name__ == "__main__":
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'hf:sg:', ['help', 'font_size=', 'smart', 'group_size='])
    except getopt.GetoptError as err:
        # print help information and exit:
        print(str(err))  # will print something like "option -a not recognized"
        usage()
        sys.exit(2)

    font_size = 40
    group_size = 1
    smart = False
    for o, a in opts:
        if o in ('-h', '--help'):
            usage()
            sys.exit(0)
        elif o in ('-f', '--font_size'):
            font_size = int(a)
        elif o in ('-s', '--smart'):
            smart = True
        elif o in ('-g', '--group_size'):
            group_size = int(a)
        else:
            assert False, "unhandled option"

    reader = SpeedReader(font_size, group_size, smart)

    if reader.get_text_size() == 0:
        print("Can't read text of zero length. Please select a text to read.")
        exit(-1)

    reader.read()
